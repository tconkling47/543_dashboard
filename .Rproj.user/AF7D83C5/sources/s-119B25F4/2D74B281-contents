---
title: "Dashboards at EVANS UW"
author: "Great student"
output: 
  flexdashboard::flex_dashboard:
    social: menu
    source_code: embed # share your code?
---

```{r setup, include=FALSE}
library(flexdashboard)
###
library(ggplot2)
library(plotly)
library(plyr)
library(sf)

myWeb="https://github.com/EvansDataScience/VAforPM_Dashboard/raw/main/"
worldMap=read_sf(paste0(myWeb,"worldMap.geojson"))

someVars=readRDS(file=url(paste0(myWeb,"dataCSV.rds")))
somePoints=readRDS(file=url(paste0(myWeb,"SafeCityData.rds")))

worldMapVars=merge(worldMap,someVars,by='ISO3')

SafeCityPoints = st_as_sf(somePoints, 
                      coords = c("lng", "lat"),
                      crs = st_crs(worldMap)) # shared

```

Static Plots
=======================================================================

Row
-----------------------------------------------------------------------

### Histogram

```{r}
base1 = ggplot(data=someVars) + theme_classic()
staticHist=base1 + geom_histogram(aes(x=HDI)) 
staticHist
```


### boxplot 

```{r}
staticBox=base1 + geom_boxplot(aes(y= mil_expend)) 
staticBox
```

Row
-----------------------------------------------------------------------

### Scatter Plot 1

```{r}
staticPoints1=base1 + geom_point(aes(x=HDI,y= mil_expend)) 
staticPoints1
```

### Scatter Plot 2

```{r}
staticPoints2=base1 + geom_point(aes(x=HDI,y= DemoIndex)) 
staticPoints2
```

Interactive Plots
=======================================================================

Row
-----------------------------------------------------------------------

### Histogram 

```{r}
ggplotly(staticHist)
```

### Boxplot

```{r}
ggplotly(staticBox)

```

Row 
-----------------------------------------------------------------------

### Scatter Plot 1

```{r}
ggplotly(staticPoints1)
```

### Scatter Plot 1

```{r}
ggplotly(staticPoints2)
```

Interactive Maps
=======================================================================


Row 
-----------------------------------------------------------------------

### Map 1


```{r}
#the text  aesthetics is NOT for ggplot

base2=ggplot(data=worldMap) + geom_sf(fill='grey90',color=NA) + theme_void()
numericMap= base2 + geom_sf(data=worldMapVars,aes(fill=DemoIndex,
                           text=Country),
                       color=NA)

numericMap=numericMap + scale_fill_gradient(low = 'red',
                                    high= 'blue')
numericMap%>%ggplotly()
```

### Map 2
```{r}
#the text  aesthetics is NOt for ggplot
categoricalMap= base2 + geom_sf(data=worldMapVars,aes(fill=cluster,
                           text=Country),
                       color=NA)

categoricalMap=categoricalMap +  scale_fill_brewer(palette ='YlOrRd',direction = -1)
categoricalMap%>%ggplotly()
```

Row 
-----------------------------------------------------------------------

### Map 3

```{r, eval=TRUE,warning=FALSE,message=FALSE}

points1=base2 + geom_sf(data=SafeCityPoints,
                       aes(text=city))
points1%>%ggplotly()`
```

### Map 4

```{r, eval=TRUE,warning=FALSE,message=FALSE}

points1=base2 + geom_sf(data=SafeCityPoints,
                       aes(text=city,color=cluster))
points1%>%ggplotly()
```


Leaflet
=============


Column
-----------------------------------------------------------------------

### Leaflet 1

```{r, echo=FALSE}
library(RColorBrewer)
library(leaflet)

###INFO TO PROVIDE
numberOfClasses = 5
colorForScale='YlOrRd'


CENTER_of_MAP="function(btn, map){map.setView([51.482577, -0.007659], 1)}"


#compute bins
bins = quantile(worldMapVars$DemoIndex, 
                probs = seq(0, 1, length.out=numberOfClasses+1),
                na.rm = T)
##create palette
palFun <- colorBin(colorForScale, 
                domain = worldMapVars$DemoIndex,
                na.color = 'white',
                reverse = T,
                bins = bins)

###
#baseLayer
baseLayer=leaflet(worldMap)%>%
             addProviderTiles("CartoDB.Positron")

demoPlot=baseLayer %>% 
          addPolygons(data=worldMapVars,
                      fillColor = ~palFun(DemoIndex),
                      weight = 0, #border thickness
                      color = "white",#border color
                      fillOpacity = 0.7) %>% 
            addLegend(data=worldMapVars,
                      pal = palFun,title = "Democracy Level<br> (Best=10)",
                      position = 'bottomright',
                      values = ~DemoIndex)
demoPlot %>%
    
    # adding the button
    addEasyButton(
        easyButton(icon="fa-home", # a symbol
                   title="Zoom to Level 1",
                   onClick=JS(CENTER_of_MAP)))

```



Column
-----------------------------------------------------------------------

### Leaflet 2

```{r}
catePal <- colorFactor(colorForScale,
                       domain=SafeCityPoints$cluster,
                       reverse = T)

pointLeaf=baseLayer%>% 
              addCircleMarkers(data= SafeCityPoints,
                               radius=~population/3000000,
                               weight = 0,label = ~city,
                               fillOpacity = 0.7,
                               color=~catePal(cluster))%>%
              addLegend(data = SafeCityPoints,
                        pal = catePal,title = "Safety Level",
                        position = 'bottomright',
                        values = ~cluster)
pointLeaf %>%
    
    # adding the button
    addEasyButton(
        easyButton(icon="fa-home", # a symbol
                   title="Zoom to Level 1",
                   onClick=JS(CENTER_of_MAP)))
```


   